# Habcam Pipeline
#
# Runs multiple object detectors in a pipeline.
#
# Un-comment each detector in order to use it (memory usage / load will increase):
#
#    (a) CFRNN - Mid-Res Cascade RNN Scallop Detector (enabled by default)
#    (b) CFRNN - High-Res Cascade RNN Scallop Detector (disabled by default)
#    (c) YOLOv2 - Mid Res YOLOv2 HabCam Fish Detector (enabled by default)
#    (d) YOLOv2 - High Res YOLOv2 Alternative Scallop Detector (disabled by default)
#    (e) Scallop-TK - Alternative Scallop Detector (disabled by default)
#    (f) Scallop-Finder - Alternative matlab Scallop Detector (disabled by default)
#
# This pipeline assumes stereo imagery together in a composite image as input. The
# first 'splitting' process selects either the left or right side of the image to
# perform detection on. Replace 'split.left_image' with 'split.right_image' to
# perform detection on the other side.
#
# Notes: All scallop and fish models are still in being compared with each other,
# and these are released in a 'beta' state. In the near-future they will be
# consolidated and only the highest-scoring ones will be kept in this file.

# ============================== GLOBAL PROPERTIES =================================
# global pipeline config
#
config _pipeline:_edge
       :capacity                               5

# =============================== INPUT FRAME LIST =================================

include common_default_input.pipe

# ================================= CROP INPUTS ====================================
process split
  :: split_image
  :split_image:type                            ocv_horizontally

connect from input.image
        to   split.image

# ================================= CFRNN SCALLOP ==================================

process scallop_cfrnn_detector
  :: image_object_detector
  :detector:type                               netharn

  block detector:netharn
    relativepath deployed =                    models/habcam_scallop_netharn.zip
  endblock

process scallop_cfrnn_filter
  :: detected_object_filter
  :filter:type                                 class_probablity_filter

  block filter:class_probablity_filter

    # Filter parameters
    :threshold                                 0.001
    :keep_all_classes                          true
    :keep_classes                              scallop
  
  endblock

process scallop_cfrnn_nms_filter
  :: refine_detections
  :refiner:type                                nms

  block refiner:nms
    :max_overlap                               0.90
    :nms_scale_factor                          1.0
    :output_scale_factor                       1.0
  endblock

process scallop_cfrnn_csv_writer
  :: detected_object_output

  # Type of file to output
  :file_name                                   scallop_cfrnn_detections.csv
  :writer:type                                 viame_csv

connect from split.left_image
        to   scallop_cfrnn_detector.image
connect from scallop_cfrnn_detector.detected_object_set
        to   scallop_cfrnn_filter.detected_object_set
connect from scallop_cfrnn_filter.detected_object_set
        to   scallop_cfrnn_nms_filter.detected_object_set
connect from scallop_cfrnn_nms_filter.detected_object_set
        to   scallop_cfrnn_csv_writer.detected_object_set
connect from input.file_name
        to   scallop_cfrnn_csv_writer.image_file_name

# ================================= YOLO V2 FISH ===================================

process fish_yolo_v2_detector
  :: image_object_detector
  :detector:type                               darknet

  block detector:darknet

    # Network config, weights, and names
    relativepath net_config =                  models/habcam_fish_yolo_v2.cfg
    relativepath weight_file =                 models/habcam_fish_yolo_v2.weights
    relativepath class_names =                 models/habcam_fish_yolo_v2.lbl

    # Detector parameters
    :thresh                                    0.001
    :hier_thresh                               0.001
    :gpu_index                                 0

    # Image scaling parameters
    :resize_option                             maintain_ar
    :scale                                     1.0

  endblock

process fish_yolo_v2_filter
  :: detected_object_filter
  :filter:type                                 class_probablity_filter

  block filter:class_probablity_filter

    # Filter parameters
    :threshold                                 0.100
    :keep_all_classes                          false
    :keep_classes                              skate;roundfish;flatfish;otherfish

  endblock

process fish_yolo_v2_csv_writer
  :: detected_object_output

  # Type of file to output
  :file_name                                   fish_yolo_v2_detections.csv
  :writer:type                                 viame_csv

connect from split.left_image
        to   fish_yolo_v2_detector.image
connect from fish_yolo_v2_detector.detected_object_set
        to   fish_yolo_v2_filter.detected_object_set
connect from fish_yolo_v2_filter.detected_object_set
        to   fish_yolo_v2_csv_writer.detected_object_set
connect from input.file_name
        to   fish_yolo_v2_csv_writer.image_file_name

# =============================== CFRNN HD SCALLOP =================================

#process scallop_cfrnn_detector
#  :: image_object_detector
#  :detector:type                               mmdet
#
#  block detector:mmdet
#    # Network config, weights, and names
#    relativepath net_config  =                 models/habcam_scallop_cfrnn.py
#    relativepath weight_file =                 models/habcam_scallop_cfrnn.pth
#    relativepath class_names =                 models/habcam_scallop_cfrnn.lbl#
#
#    # Detector parameters
#    :thresh                                    0.001
#    :gpu_index                                 0
#
#  endblock
#
#process scallop_cfrnn_filter
#  :: detected_object_filter
#  :filter:type                                 class_probablity_filter
#
#  block filter:class_probablity_filter
#
#    # Filter parameters
#    :threshold                                 0.001
#    :keep_all_classes                          false
#    :keep_classes                              live_scallop;dead_scallop
#  
#  endblock
#
#process scallop_cfrnn_nms_filter
#  :: refine_detections
#  :refiner:type                                nms
#
#  block refiner:nms
#    :max_overlap                               0.50
#    :nms_scale_factor                          1.0
#    :output_scale_factor                       1.0
#  endblock
#
#process scallop_cfrnn_csv_writer
#  :: detected_object_output
#
#  # Type of file to output
#  :file_name                                   scallop_cfrnn_detections.csv
#  :writer:type                                 viame_csv
#
#connect from split.left_image
#        to   scallop_cfrnn_detector.image
#connect from scallop_cfrnn_detector.detected_object_set
#        to   scallop_cfrnn_filter.detected_object_set
#connect from scallop_cfrnn_filter.detected_object_set
#        to   scallop_cfrnn_nms_filter.detected_object_set
#connect from scallop_cfrnn_nms_filter.detected_object_set
#        to   scallop_cfrnn_csv_writer.detected_object_set
#connect from input.file_name
#        to   scallop_cfrnn_csv_writer.image_file_name

# ================================ YOLO V2 SCALLOP =================================

#process scallop_yolo_v2_detector
#  :: image_object_detector
#  :detector:type                               darknet
#
#  block detector:darknet
#
#    # Network config, weights, and names
#    relativepath net_config =                  models/habcam_scallop_yolo_v2.cfg
#    relativepath weight_file =                 models/habcam_scallop_yolo_v2.weights
#    relativepath class_names =                 models/habcam_scallop_yolo_v2.lbl
#
#    # Detector parameters
#    :thresh                                    0.001
#    :hier_thresh                               0.001
#    :gpu_index                                 0
#
#    # Image scaling parameters
#    :resize_option                             maintain_ar
#    :scale                                     1.0
#
#  endblock
#
#process scallop_yolo_v2_filter
#  :: detected_object_filter
#  :filter:type                                 class_probablity_filter
#
#  block filter:class_probablity_filter
#
#    # Filter parameters
#    :threshold                                 0.100
#    :keep_all_classes                          false
#    :keep_classes                              live_scallop;dead_scallop
#  
#  endblock
#
#process scallop_yolo_v2_csv_writer
#  :: detected_object_output
#
#  # Type of file to output
#  :file_name                                   scallop_yolo_v2_detections.csv
#  :writer:type                                 viame_csv
#
#connect from split.left_image
#        to   scallop_yolo_v2_detector.image
#connect from scallop_yolo_v2_detector.detected_object_set
#        to   scallop_yolo_v2_filter.detected_object_set
#connect from scallop_yolo_v2_filter.detected_object_set
#        to   scallop_yolo_v2_csv_writer.detected_object_set
#connect from input.file_name
#        to   scallop_yolo_v2_csv_writer.image_file_name

# =================================== SCALLOP-TK ===================================

#process scallop_tk_detector
#  :: image_object_detector
#  :detector:type                               scallop_tk
#
#  block detector:scallop_tk
#    relativepath config_file =                 models/scallop_tk/SYSTEM_SETTINGS
#  endblock
#
#process scallop_tk_csv_writer
#  :: detected_object_output
#
#  # Type of file to output
#  :file_name                                   scallop_tk_detections.csv
#  :writer:type                                 viame_csv
#
#connect from split.left_image
#        to   scallop_tk_detector.image
#connect from scallop_tk_detector.detected_object_set
#        to   scallop_tk_csv_writer.detected_object_set
#connect from input.file_name
#        to   scallop_tk_csv_writer.image_file_name

# ================================= SCALLOP-FINDER =================================

#process lanl_detector
#  :: image_object_detector
#   :detector:type                              matlab
#   :detector:matlab:program_file  ../../matlab/lanl_scallop_finder/ScallopFinder.m
#
#process lanl_csv_writer
#  :: detected_object_output
#
#  # Type of file to output
#  :file_name                                   lanl_detections.csv
#  :writer:type                                 viame_csv
#
#
#connect from split.left_image
#        to   lanl_detector.image
#connect from lanl_detector.detected_object_set
#        to   lanl_csv_writer.detected_object_set
#connect from input.file_name
#        to   lanl_csv_writer.image_file_name

# -- end of file --
